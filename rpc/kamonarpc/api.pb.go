// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package kamonarpc is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	VersionRequest
	VersionResponse
	MeInput
	SingupInput
	SignupOutput
	LoginInput
	LoginOutput
	User
*/
package kamonarpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User_AccessLevel int32

const (
	User_USER  User_AccessLevel = 0
	User_ADMIN User_AccessLevel = 1
)

var User_AccessLevel_name = map[int32]string{
	0: "USER",
	1: "ADMIN",
}
var User_AccessLevel_value = map[string]int32{
	"USER":  0,
	"ADMIN": 1,
}

func (x User_AccessLevel) String() string {
	return proto.EnumName(User_AccessLevel_name, int32(x))
}
func (User_AccessLevel) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7, 0} }

type VersionRequest struct {
}

func (m *VersionRequest) Reset()                    { *m = VersionRequest{} }
func (m *VersionRequest) String() string            { return proto.CompactTextString(m) }
func (*VersionRequest) ProtoMessage()               {}
func (*VersionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type VersionResponse struct {
	VersionString string `protobuf:"bytes,1,opt,name=version_string,json=versionString" json:"version_string,omitempty"`
	Major         uint32 `protobuf:"varint,2,opt,name=major" json:"major,omitempty"`
	Minor         uint32 `protobuf:"varint,3,opt,name=minor" json:"minor,omitempty"`
	Patch         uint32 `protobuf:"varint,4,opt,name=patch" json:"patch,omitempty"`
	Prerelease    string `protobuf:"bytes,5,opt,name=prerelease" json:"prerelease,omitempty"`
	BuildMetadata string `protobuf:"bytes,6,opt,name=build_metadata,json=buildMetadata" json:"build_metadata,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *VersionResponse) GetVersionString() string {
	if m != nil {
		return m.VersionString
	}
	return ""
}

func (m *VersionResponse) GetMajor() uint32 {
	if m != nil {
		return m.Major
	}
	return 0
}

func (m *VersionResponse) GetMinor() uint32 {
	if m != nil {
		return m.Minor
	}
	return 0
}

func (m *VersionResponse) GetPatch() uint32 {
	if m != nil {
		return m.Patch
	}
	return 0
}

func (m *VersionResponse) GetPrerelease() string {
	if m != nil {
		return m.Prerelease
	}
	return ""
}

func (m *VersionResponse) GetBuildMetadata() string {
	if m != nil {
		return m.BuildMetadata
	}
	return ""
}

type MeInput struct {
}

func (m *MeInput) Reset()                    { *m = MeInput{} }
func (m *MeInput) String() string            { return proto.CompactTextString(m) }
func (*MeInput) ProtoMessage()               {}
func (*MeInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type SingupInput struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *SingupInput) Reset()                    { *m = SingupInput{} }
func (m *SingupInput) String() string            { return proto.CompactTextString(m) }
func (*SingupInput) ProtoMessage()               {}
func (*SingupInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SingupInput) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *SingupInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type SignupOutput struct {
	VerificationToken string `protobuf:"bytes,1,opt,name=verification_token,json=verificationToken" json:"verification_token,omitempty"`
	Error             string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Success           bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *SignupOutput) Reset()                    { *m = SignupOutput{} }
func (m *SignupOutput) String() string            { return proto.CompactTextString(m) }
func (*SignupOutput) ProtoMessage()               {}
func (*SignupOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SignupOutput) GetVerificationToken() string {
	if m != nil {
		return m.VerificationToken
	}
	return ""
}

func (m *SignupOutput) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SignupOutput) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type LoginInput struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginInput) Reset()                    { *m = LoginInput{} }
func (m *LoginInput) String() string            { return proto.CompactTextString(m) }
func (*LoginInput) ProtoMessage()               {}
func (*LoginInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LoginInput) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginInput) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginOutput struct {
	Token   string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Success bool   `protobuf:"varint,3,opt,name=success" json:"success,omitempty"`
}

func (m *LoginOutput) Reset()                    { *m = LoginOutput{} }
func (m *LoginOutput) String() string            { return proto.CompactTextString(m) }
func (*LoginOutput) ProtoMessage()               {}
func (*LoginOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LoginOutput) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *LoginOutput) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LoginOutput) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type User struct {
	Id           string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	PasswordHash string `protobuf:"bytes,3,opt,name=password_hash,json=passwordHash" json:"password_hash,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPasswordHash() string {
	if m != nil {
		return m.PasswordHash
	}
	return ""
}

func init() {
	proto.RegisterType((*VersionRequest)(nil), "kamonarpc.VersionRequest")
	proto.RegisterType((*VersionResponse)(nil), "kamonarpc.VersionResponse")
	proto.RegisterType((*MeInput)(nil), "kamonarpc.MeInput")
	proto.RegisterType((*SingupInput)(nil), "kamonarpc.SingupInput")
	proto.RegisterType((*SignupOutput)(nil), "kamonarpc.SignupOutput")
	proto.RegisterType((*LoginInput)(nil), "kamonarpc.LoginInput")
	proto.RegisterType((*LoginOutput)(nil), "kamonarpc.LoginOutput")
	proto.RegisterType((*User)(nil), "kamonarpc.User")
	proto.RegisterEnum("kamonarpc.User_AccessLevel", User_AccessLevel_name, User_AccessLevel_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VersionService service

type VersionServiceClient interface {
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type versionServiceClient struct {
	cc *grpc.ClientConn
}

func NewVersionServiceClient(cc *grpc.ClientConn) VersionServiceClient {
	return &versionServiceClient{cc}
}

func (c *versionServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/kamonarpc.VersionService/Version", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionService service

type VersionServiceServer interface {
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

func RegisterVersionServiceServer(s *grpc.Server, srv VersionServiceServer) {
	s.RegisterService(&_VersionService_serviceDesc, srv)
}

func _VersionService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kamonarpc.VersionService/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kamonarpc.VersionService",
	HandlerType: (*VersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _VersionService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for AuthService service

type AuthServiceClient interface {
	Signup(ctx context.Context, in *SingupInput, opts ...grpc.CallOption) (*SignupOutput, error)
	Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginOutput, error)
	Me(ctx context.Context, in *MeInput, opts ...grpc.CallOption) (*User, error)
}

type authServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthServiceClient(cc *grpc.ClientConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Signup(ctx context.Context, in *SingupInput, opts ...grpc.CallOption) (*SignupOutput, error) {
	out := new(SignupOutput)
	err := grpc.Invoke(ctx, "/kamonarpc.AuthService/Signup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Login(ctx context.Context, in *LoginInput, opts ...grpc.CallOption) (*LoginOutput, error) {
	out := new(LoginOutput)
	err := grpc.Invoke(ctx, "/kamonarpc.AuthService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) Me(ctx context.Context, in *MeInput, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/kamonarpc.AuthService/Me", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceServer interface {
	Signup(context.Context, *SingupInput) (*SignupOutput, error)
	Login(context.Context, *LoginInput) (*LoginOutput, error)
	Me(context.Context, *MeInput) (*User, error)
}

func RegisterAuthServiceServer(s *grpc.Server, srv AuthServiceServer) {
	s.RegisterService(&_AuthService_serviceDesc, srv)
}

func _AuthService_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingupInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kamonarpc.AuthService/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Signup(ctx, req.(*SingupInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kamonarpc.AuthService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Login(ctx, req.(*LoginInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_Me_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).Me(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kamonarpc.AuthService/Me",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).Me(ctx, req.(*MeInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kamonarpc.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Signup",
			Handler:    _AuthService_Signup_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthService_Login_Handler,
		},
		{
			MethodName: "Me",
			Handler:    _AuthService_Me_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xd9, 0x90, 0x7f, 0x3b, 0x69, 0xd2, 0x60, 0x95, 0xb2, 0xec, 0x01, 0x55, 0x8b, 0x90,
	0xca, 0x81, 0x1c, 0x8a, 0x84, 0xc4, 0x05, 0x88, 0x04, 0x12, 0x95, 0x1a, 0x90, 0x76, 0x29, 0xd7,
	0xc8, 0xdd, 0x0c, 0x59, 0xd3, 0xac, 0x6d, 0x6c, 0x6f, 0x78, 0x28, 0x9e, 0x82, 0x37, 0x43, 0xf6,
	0x3a, 0xa9, 0x8b, 0xb8, 0xd0, 0xe3, 0xf7, 0x9b, 0xcc, 0xcc, 0x97, 0xf1, 0xb7, 0x10, 0x53, 0xc9,
	0x66, 0x52, 0x09, 0x23, 0x48, 0x7c, 0x4d, 0x6b, 0xc1, 0xa9, 0x92, 0x65, 0x36, 0x85, 0xc9, 0x57,
	0x54, 0x9a, 0x09, 0x9e, 0xe3, 0x8f, 0x06, 0xb5, 0xc9, 0x7e, 0x47, 0x70, 0xb8, 0x47, 0x5a, 0x0a,
	0xae, 0x91, 0x3c, 0x83, 0xc9, 0xb6, 0x45, 0x4b, 0x6d, 0x14, 0xe3, 0xeb, 0x24, 0x3a, 0x89, 0x4e,
	0xe3, 0x7c, 0xec, 0x69, 0xe1, 0x20, 0x39, 0x82, 0x5e, 0x4d, 0xbf, 0x0b, 0x95, 0x74, 0x4e, 0xa2,
	0xd3, 0x71, 0xde, 0x0a, 0x47, 0x19, 0x17, 0x2a, 0xb9, 0xef, 0xa9, 0x15, 0x96, 0x4a, 0x6a, 0xca,
	0x2a, 0xe9, 0xb6, 0xd4, 0x09, 0xf2, 0x04, 0x40, 0x2a, 0x54, 0xb8, 0x41, 0xaa, 0x31, 0xe9, 0xb9,
	0x25, 0x01, 0xb1, 0x46, 0xae, 0x1a, 0xb6, 0x59, 0x2d, 0x6b, 0x34, 0x74, 0x45, 0x0d, 0x4d, 0xfa,
	0xad, 0x11, 0x47, 0x17, 0x1e, 0x66, 0x31, 0x0c, 0x16, 0x78, 0xce, 0x65, 0x63, 0xb2, 0xb7, 0x30,
	0x2a, 0x18, 0x5f, 0x37, 0xd2, 0x49, 0xbb, 0x16, 0x6b, 0xca, 0x36, 0xfe, 0x0f, 0xb4, 0x82, 0xa4,
	0x30, 0x94, 0x54, 0xeb, 0x9f, 0x42, 0xad, 0x9c, 0xf7, 0x38, 0xdf, 0xeb, 0xac, 0x86, 0x83, 0x82,
	0xad, 0x79, 0x23, 0x3f, 0x37, 0xc6, 0x4e, 0x78, 0x01, 0x64, 0x8b, 0x8a, 0x7d, 0x63, 0x25, 0x35,
	0xf6, 0x20, 0x46, 0x5c, 0x23, 0xf7, 0xe3, 0x1e, 0x84, 0x95, 0x2f, 0xb6, 0xe0, 0x16, 0x2a, 0xe5,
	0x6f, 0x62, 0x17, 0x5a, 0x41, 0x12, 0x18, 0xe8, 0xa6, 0x2c, 0x51, 0x6b, 0x77, 0x95, 0x61, 0xbe,
	0x93, 0xd9, 0x1b, 0x80, 0x0b, 0xb1, 0x66, 0xfc, 0xae, 0x76, 0x0b, 0x18, 0xb9, 0x7e, 0xef, 0xf6,
	0x08, 0x7a, 0xa1, 0xc1, 0x56, 0xfc, 0xb7, 0xa9, 0x06, 0xba, 0x97, 0x1a, 0x15, 0x99, 0x40, 0x87,
	0xad, 0xfc, 0xa8, 0x0e, 0x5b, 0xdd, 0xd8, 0xeb, 0x84, 0xf6, 0x9e, 0xc2, 0x78, 0x67, 0x67, 0x59,
	0x51, 0x5d, 0xb9, 0x69, 0x71, 0x7e, 0xb0, 0x83, 0x1f, 0xa9, 0xae, 0xb2, 0x0c, 0x46, 0x73, 0x37,
	0xfc, 0x02, 0xb7, 0xb8, 0x21, 0x43, 0xe8, 0x5e, 0x16, 0x1f, 0xf2, 0xe9, 0x3d, 0x12, 0x43, 0x6f,
	0xfe, 0x7e, 0x71, 0xfe, 0x69, 0x1a, 0x9d, 0xe5, 0xfb, 0x70, 0x16, 0xa8, 0xb6, 0xac, 0x44, 0xf2,
	0x0e, 0x06, 0x9e, 0x90, 0xc7, 0xb3, 0x7d, 0x8a, 0x67, 0xb7, 0x23, 0x9c, 0xa6, 0xff, 0x2a, 0xb5,
	0x51, 0x3e, 0xfb, 0x15, 0xc1, 0x68, 0xde, 0x98, 0x6a, 0x37, 0xf1, 0x35, 0xf4, 0xdb, 0xe7, 0x25,
	0xc7, 0x41, 0x57, 0x10, 0x99, 0xf4, 0xd1, 0x2d, 0x1e, 0x24, 0xe1, 0x15, 0xf4, 0xdc, 0xa9, 0xc9,
	0xc3, 0xe0, 0x17, 0x37, 0x8f, 0x97, 0x1e, 0xff, 0x8d, 0x7d, 0xdf, 0x73, 0xe8, 0x2c, 0x90, 0x90,
	0xa0, 0xea, 0xc3, 0x9a, 0x1e, 0x06, 0xcc, 0x1e, 0xfc, 0xaa, 0xef, 0x3e, 0xd8, 0x97, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x66, 0x52, 0x52, 0x61, 0xbd, 0x03, 0x00, 0x00,
}
